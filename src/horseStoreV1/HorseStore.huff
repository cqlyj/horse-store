// 60008060093d393df3 => contract creation code
// take the binary after me, and stick it on chain
// 39 CODECOPY
// f3 RETURN

// xxx                => run time code
// xxx                => metadata

/*
* Interfaces
*/

#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00            // TOP [0] BOTTOM

    // calldataload can put 32 bytes of calldata into the stack
    calldataload    // [calldata]

    // SHR opcode 
    // 0x1220 (bytes)
    // 1 byte = 8 bits
    // 0b 10010 00100000 = 4640
    // 0b1001000100000 >> 2 = 0b0010010001000 = 1160 = 4640 / 4

    // calldata is 32 bytes long, the function selector is 4 bytes long
    // so we need to shift right by 28 bytes = 28 * 8 = 224 bits
    0xe0            // [0xe0 ,calldata]
    shr             // [functionSelector]

    // jump => function associated with the function selector
    // if functionSelector == updateHorseNumber -> jump to updateHorseNumber
    // 0xcdfead2e == updateHorseNumber(uint256)

    // if functionSelector == readNumberOfHorses -> jump to readNumberOfHorses
    // 0xe026c017 == readNumberOfHorses()

    dup1             // [functionSelector, functionSelector]

    __FUNC_SIG(updateHorseNumber)       // [0xcdfead2e, functionSelector, functionSelector]
    eq               // [true_if_functionSelector_is_updateHorseNumber, functionSelector]
    // jump to updateHorseNumber if true
    updateJump       // [updateHorseNumberProgramCounter, true_if_functionSelector_is_updateHorseNumber, functionSelector]
    jumpi            // [functionSelector]

    __FUNC_SIG(readNumberOfHorses)       // [0xe026c017, functionSelector]
    eq               // [true_if_functionSelector_is_readNumberOfHorses]
    readJump         // [readNumberOfHorsesProgramCounter, true_if_functionSelector_is_readNumberOfHorses]
    jumpi            // []

    // revert (offset, size)
    0x00 0x00 revert // [0, 0] => []

    updateJump:
        SET_NUMBER_OF_HORSES() 
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0){}